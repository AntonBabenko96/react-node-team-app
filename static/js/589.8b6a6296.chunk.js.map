{"version":3,"file":"static/js/589.8b6a6296.chunk.js","mappings":"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","sources":["helpers/validationSchema.jsx","components/AuthForm/AuthForm.jsx","pages/RegisterPage/RegisterPage.jsx","redux/auth/selectors.js","webpack://react-homework-template/./src/pages/MainPage/MainPage.module.scss?b09f","webpack://react-homework-template/./src/pages/RegisterPage/RegisterPage.module.scss?c188"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const validationRegisterSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Email is required'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters')\n    .required('Password is required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Confirm Password is required'),\n});\n\nexport const validationLoginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Email is required'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters')\n    .required('Password is required'),\n});\n\n// eslint-disable-next-line import/no-anonymous-default-export\n// export default { validationRegisterSchema, validationLoginSchema };","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';\nimport CloseIcon from '@mui/icons-material/Close';\n\nimport {\n  validationRegisterSchema,\n  validationLoginSchema,\n} from 'helpers/validationSchema';\n\nimport { register, login } from '../../redux/auth/auth-operations';\nimport {selectLoading} from '../../redux/auth/selectors'\nimport Loader from 'shared/Loder/Loader';\n\nimport './AuthForm.scss';\n\nexport const AuthForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n\n  const [currentPath] = useState(window.location.pathname);\n  const isRegisterPath = currentPath.endsWith('/register');\n  const isLoginPath = currentPath.endsWith('/login');\n  const isLoading = useSelector(selectLoading);\n \n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const toggleConfirmPasswordVisibility = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (isRegisterPath) {\n      dispatch(register({ email: values.email, password: values.password }))\n     \n        .then(() => {\n          dispatch(login({ email: values.email, password: values.password }));\n          navigate('/user');\n        });\n    }\n    if (isLoginPath) {\n      dispatch(login({ email: values.email, password: values.password }));\n      navigate('/user');\n    }\n    resetForm();\n  };\n\n  return (\n    <>  {isLoading && <Loader />}\n    <div className=\"registration-form\">\n      <h1>{isRegisterPath ? 'Registration' : 'Login'}</h1>\n     \n      <Formik\n        initialValues={{ email: '', password: '', confirmPassword: '' }}\n        validationSchema={\n          isRegisterPath ? validationRegisterSchema : validationLoginSchema\n        }\n        onSubmit={handleSubmit}\n      >\n        {({ values }) => (\n          <Form>\n            {/* Email Field */}\n            <div>\n              <div className=\"input-icon\">\n                <Field name=\"email\">\n                  {({ field, form, meta }) => (\n                    <>\n                      <input\n                        type=\"text\"\n                        name=\"email\"\n                        {...field}\n                        placeholder=\"Email\"\n                        value={values.email}\n                        onChange={event => {\n                          form.setFieldValue('email', event.target.value);\n                        }}\n                        className={`input ${\n                          meta.touched && meta.error ? 'errorBorder' : ''\n                        } ${values.email === '' ? 'emptyInput' : ''}`}\n                      />\n\n                      {meta.touched && meta.error && (\n                        <ErrorMessage\n                          name=\"email\"\n                          component=\"div\"\n                          className=\"errorMessage\"\n                        />\n                      )}\n\n                      {values.email && (\n                        <CloseIcon\n                          className=\"iconClose\"\n                          onClick={() => {\n                            form.setFieldValue('email', '');\n                          }}\n                        />\n                      )}\n                    </>\n                  )}\n                </Field>\n              </div>\n            </div>\n\n            {/* Password Field */}\n            <div>\n              <div className=\"input-icon\">\n                <Field name=\"password\">\n                  {({ field, form, meta }) => (\n                    <>\n                      <input\n                        type={showPassword ? 'text' : 'password'}\n                        name=\"password\"\n                        {...field}\n                        placeholder=\"Password\"\n                        className={`input ${\n                          meta.touched && meta.error ? 'errorBorder' : ''\n                        } ${values.password === '' ? 'emptyInput' : ''}`}\n                      />\n\n                      {showPassword ? (\n                        <RemoveRedEyeIcon\n                          className=\"icon\"\n                          onClick={togglePasswordVisibility}\n                        />\n                      ) : (\n                        <VisibilityOffIcon\n                          className=\"icon\"\n                          onClick={togglePasswordVisibility}\n                        />\n                      )}\n\n                      {meta.touched && meta.error && (\n                        <ErrorMessage\n                          name=\"password\"\n                          component=\"div\"\n                          className=\"errorMessage\"\n                        />\n                      )}\n                    </>\n                  )}\n                </Field>\n              </div>\n            </div>\n\n            {/* Confirm Password Field */}\n            {isRegisterPath && (\n              <div>\n                <div className=\"input-icon\">\n                  <Field name=\"confirmPassword\">\n                    {({ field, form, meta }) => (\n                      <>\n                        <input\n                          type={showConfirmPassword ? 'text' : 'password'}\n                          name=\"confirmPassword\"\n                          {...field}\n                          placeholder=\"Confirm password\"\n                          className={`input ${\n                            meta.touched && meta.error ? 'errorBorder' : ''\n                          } ${\n                            values.confirmPassword === '' ? 'emptyInput' : ''\n                          }`}\n                        />\n\n                        {showConfirmPassword ? (\n                          <RemoveRedEyeIcon\n                            className=\"icon\"\n                            onClick={toggleConfirmPasswordVisibility}\n                          />\n                        ) : (\n                          <VisibilityOffIcon\n                            className=\"icon\"\n                            onClick={toggleConfirmPasswordVisibility}\n                          />\n                        )}\n\n                        {meta.touched && meta.error && (\n                          <ErrorMessage\n                            name=\"confirmPassword\"\n                            component=\"div\"\n                            className=\"errorMessage\"\n                          />\n                        )}\n                      </>\n                    )}\n                  </Field>\n                </div>\n              </div>\n            )}\n\n            <button type=\"submit\">\n              {isRegisterPath ? 'Register' : 'Login'}\n            </button>\n          </Form>\n        )}\n      </Formik>\n     \n      {isRegisterPath ? (\n        <p>\n          Already have an account? <Link to=\"/login\"> Login</Link>{' '}\n        </p>\n      ) : (\n        <p>\n          Don't have an account? <Link to=\"/register\"> Register</Link>{' '}\n        </p>\n      )}\n    </div>\n    </>\n  );\n};\n","import { AuthForm } from 'components/AuthForm/AuthForm';\n\nimport styles from '../MainPage/MainPage.module.scss';\nimport style from './RegisterPage.module.scss'\n\nexport default function RegisterPage() {\n  return (\n    <>\n      <section className={styles.MainSection}>\n        <div className=\"container\">\n          <div className={style.form}>\n            <AuthForm />\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n","import { createSelector } from 'reselect';\n\nconst selectAuth = state => state.user;\n\nexport const selectUser = createSelector(selectAuth, auth => auth.user);\n\nexport const selectIsLogin = createSelector(selectAuth, auth => auth.isLogin);\n\nexport const selectLoading = createSelector(selectAuth, auth => auth.loading);\n\nexport const selectError = createSelector(selectAuth, auth => auth.error);\n","// extracted by mini-css-extract-plugin\nexport default {\"MainSection\":\"MainPage_MainSection__f+T9s\",\"Title\":\"MainPage_Title__7tjbU\"};","// extracted by mini-css-extract-plugin\nexport default {\"active\":\"RegisterPage_active__CCSy1\",\"burger\":\"RegisterPage_burger__L1RGJ\",\"burgerLines\":\"RegisterPage_burgerLines__Mp7AQ\",\"form\":\"RegisterPage_form__2uFZs\"};"],"names":["validationRegisterSchema","Yup","shape","email","required","password","min","confirmPassword","oneOf","validationLoginSchema","AuthForm","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","navigate","useNavigate","dispatch","useDispatch","window","location","pathname","currentPath","isRegisterPath","endsWith","isLoginPath","isLoading","useSelector","selectLoading","togglePasswordVisibility","toggleConfirmPasswordVisibility","Loader","className","initialValues","validationSchema","onSubmit","values","resetForm","register","then","login","name","field","form","meta","type","placeholder","value","onChange","event","setFieldValue","target","touched","error","component","Close","onClick","RemoveRedEye","VisibilityOff","to","RegisterPage","styles","style","selectAuth","state","user","selectIsLogin","createSelector","auth","isLogin","loading"],"sourceRoot":""}