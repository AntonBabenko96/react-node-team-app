{"version":3,"file":"static/js/664.626b1d32.chunk.js","mappings":"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","sources":["helpers/validationSchema.jsx","components/AuthForm/AuthForm.jsx","pages/LoginPage/LoginPage.jsx","redux/auth/selectors.js","webpack://react-homework-template/./src/pages/MainPage/MainPage.module.scss?b09f","webpack://react-homework-template/./src/pages/RegisterPage/RegisterPage.module.scss?c188"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const validationRegisterSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Email is required'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters')\n    .required('Password is required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Confirm Password is required'),\n});\n\nexport const validationLoginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Email is required'),\n  password: Yup.string()\n    .min(6, 'Password must be at least 6 characters')\n    .required('Password is required'),\n});\n\n// eslint-disable-next-line import/no-anonymous-default-export\n// export default { validationRegisterSchema, validationLoginSchema };","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';\nimport CloseIcon from '@mui/icons-material/Close';\n\nimport {\n  validationRegisterSchema,\n  validationLoginSchema,\n} from 'helpers/validationSchema';\n\nimport { register, login } from '../../redux/auth/auth-operations';\nimport { selectLoading, selectIsLogin } from '../../redux/auth/selectors';\nimport Loader from 'shared/Loder/Loader';\n\nimport './AuthForm.scss';\n\nexport const AuthForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const [currentPath] = useState(window.location.pathname);\n  const isRegisterPath = currentPath.endsWith('/register');\n  const isLoginPath = currentPath.endsWith('/login');\n  const isLoading = useSelector(selectLoading);\n  const isLogin = useSelector(selectIsLogin);\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const toggleConfirmPasswordVisibility = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (isRegisterPath) {\n      dispatch(register({ email: values.email, password: values.password }));\n    }\n\n    if (isLoginPath) {\n      dispatch(login({ email: values.email, password: values.password }));\n     \n    }\n    resetForm();\n  };\n\n  if (isLogin) {\n    navigate('/user');\n  }\n\n  return (\n    <>\n      {' '}\n      {isLoading && <Loader />}\n      <div className=\"registration-form\">\n        <h1>{isRegisterPath ? 'Registration' : 'Login'}</h1>\n\n        <Formik\n          initialValues={{ email: '', password: '', confirmPassword: '' }}\n          validationSchema={\n            isRegisterPath ? validationRegisterSchema : validationLoginSchema\n          }\n          onSubmit={handleSubmit}\n        >\n          {({ values }) => (\n            <Form>\n              {/* Email Field */}\n              <div>\n                <div className=\"input-icon\">\n                  <Field name=\"email\">\n                    {({ field, form, meta }) => (\n                      <>\n                        <input\n                          type=\"text\"\n                          name=\"email\"\n                          {...field}\n                          placeholder=\"Email\"\n                          value={values.email}\n                          onChange={event => {\n                            form.setFieldValue('email', event.target.value);\n                          }}\n                          className={`input ${\n                            meta.touched && meta.error ? 'errorBorder' : ''\n                          } ${values.email === '' ? 'emptyInput' : ''}`}\n                        />\n\n                        {meta.touched && meta.error && (\n                          <ErrorMessage\n                            name=\"email\"\n                            component=\"div\"\n                            className=\"errorMessage\"\n                          />\n                        )}\n\n                        {values.email && (\n                          <CloseIcon\n                            className=\"iconClose\"\n                            onClick={() => {\n                              form.setFieldValue('email', '');\n                            }}\n                          />\n                        )}\n                      </>\n                    )}\n                  </Field>\n                </div>\n              </div>\n\n              {/* Password Field */}\n              <div>\n                <div className=\"input-icon\">\n                  <Field name=\"password\">\n                    {({ field, form, meta }) => (\n                      <>\n                        <input\n                          type={showPassword ? 'text' : 'password'}\n                          name=\"password\"\n                          {...field}\n                          placeholder=\"Password\"\n                          className={`input ${\n                            meta.touched && meta.error ? 'errorBorder' : ''\n                          } ${values.password === '' ? 'emptyInput' : ''}`}\n                        />\n\n                        {showPassword ? (\n                          <RemoveRedEyeIcon\n                            className=\"icon\"\n                            onClick={togglePasswordVisibility}\n                          />\n                        ) : (\n                          <VisibilityOffIcon\n                            className=\"icon\"\n                            onClick={togglePasswordVisibility}\n                          />\n                        )}\n\n                        {meta.touched && meta.error && (\n                          <ErrorMessage\n                            name=\"password\"\n                            component=\"div\"\n                            className=\"errorMessage\"\n                          />\n                        )}\n                      </>\n                    )}\n                  </Field>\n                </div>\n              </div>\n\n              {/* Confirm Password Field */}\n              {isRegisterPath && (\n                <div>\n                  <div className=\"input-icon\">\n                    <Field name=\"confirmPassword\">\n                      {({ field, form, meta }) => (\n                        <>\n                          <input\n                            type={showConfirmPassword ? 'text' : 'password'}\n                            name=\"confirmPassword\"\n                            {...field}\n                            placeholder=\"Confirm password\"\n                            className={`input ${\n                              meta.touched && meta.error ? 'errorBorder' : ''\n                            } ${\n                              values.confirmPassword === '' ? 'emptyInput' : ''\n                            }`}\n                          />\n\n                          {showConfirmPassword ? (\n                            <RemoveRedEyeIcon\n                              className=\"icon\"\n                              onClick={toggleConfirmPasswordVisibility}\n                            />\n                          ) : (\n                            <VisibilityOffIcon\n                              className=\"icon\"\n                              onClick={toggleConfirmPasswordVisibility}\n                            />\n                          )}\n\n                          {meta.touched && meta.error && (\n                            <ErrorMessage\n                              name=\"confirmPassword\"\n                              component=\"div\"\n                              className=\"errorMessage\"\n                            />\n                          )}\n                        </>\n                      )}\n                    </Field>\n                  </div>\n                </div>\n              )}\n\n              <button type=\"submit\">\n                {isRegisterPath ? 'Register' : 'Login'}\n              </button>\n            </Form>\n          )}\n        </Formik>\n\n        {isRegisterPath ? (\n          <p>\n            Already have an account? <Link to=\"/login\"> Login</Link>{' '}\n          </p>\n        ) : (\n          <p>\n            Don't have an account? <Link to=\"/register\"> Register</Link>{' '}\n          </p>\n        )}\n      </div>\n    </>\n  );\n};\n","import { AuthForm } from 'components/AuthForm/AuthForm';\n\nimport styles from '../MainPage/MainPage.module.scss';\nimport style from '../RegisterPage/RegisterPage.module.scss'\n\n\nexport default function LoginPage() {\n  return (\n    <>\n      <section className={styles.MainSection}>\n        <div className=\"container\">\n          <div className={style.form}>\n     \n            <AuthForm />\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n","import { createSelector } from 'reselect';\n\nconst selectAuth = state => state.user;\n\nexport const selectUser = createSelector(selectAuth, auth => auth.user);\n\nexport const selectIsLogin = createSelector(selectAuth, auth => auth.isLogin);\n\nexport const selectLoading = createSelector(selectAuth, auth => auth.loading);\n\nexport const selectError = createSelector(selectAuth, auth => auth.error);\n\nexport const selectNewUser = createSelector(selectAuth, auth => auth.newUser);\n","// extracted by mini-css-extract-plugin\nexport default {\"MainSection\":\"MainPage_MainSection__f+T9s\",\"Title\":\"MainPage_Title__7tjbU\"};","// extracted by mini-css-extract-plugin\nexport default {\"headerNavActive\":\"RegisterPage_headerNavActive__fRO3F\",\"burger\":\"RegisterPage_burger__L1RGJ\",\"burgerLines\":\"RegisterPage_burgerLines__Mp7AQ\",\"form\":\"RegisterPage_form__2uFZs\"};"],"names":["validationRegisterSchema","Yup","shape","email","required","password","min","confirmPassword","oneOf","validationLoginSchema","AuthForm","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","navigate","useNavigate","dispatch","useDispatch","window","location","pathname","currentPath","isRegisterPath","endsWith","isLoginPath","isLoading","useSelector","selectLoading","isLogin","selectIsLogin","togglePasswordVisibility","toggleConfirmPasswordVisibility","Loader","className","initialValues","validationSchema","onSubmit","values","resetForm","register","login","name","field","form","meta","type","placeholder","value","onChange","event","setFieldValue","target","touched","error","component","Close","onClick","RemoveRedEye","VisibilityOff","to","LoginPage","styles","style","selectAuth","state","user","selectUser","createSelector","auth","loading","selectNewUser","newUser"],"sourceRoot":""}